/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.NewCustomer;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-02T20:20:40.595331700+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Customers", description = "the Customers API")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /customers : Get all customers
     *
     * @return A list of customers (status code 200)
     */
    @Operation(
        operationId = "customersGet",
        summary = "Get all customers",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of customers", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NewCustomer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    default ResponseEntity<List<NewCustomer>> _customersGet(
        
    ) {
        return customersGet();
    }

    // Override this method
    default  ResponseEntity<List<NewCustomer>> customersGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"phone\" : \"phone\", \"name\" : \"name\", \"email\" : \"email\" }, { \"phone\" : \"phone\", \"name\" : \"name\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /customers : Add a new customer
     *
     * @param newCustomer  (required)
     * @return Customer created successfully (status code 201)
     */
    @Operation(
        operationId = "customersPost",
        summary = "Add a new customer",
        tags = { "Customers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Customer created successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _customersPost(
        @Parameter(name = "NewCustomer", description = "", required = true) @Valid @RequestBody NewCustomer newCustomer
    ) {
        return customersPost(newCustomer);
    }

    // Override this method
    default  ResponseEntity<Void> customersPost(NewCustomer newCustomer) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
