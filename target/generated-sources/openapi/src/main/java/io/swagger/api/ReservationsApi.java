/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.NewReservation;
import io.swagger.model.Reservation;
import io.swagger.model.ReservationUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-02T20:20:40.595331700+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Reservations", description = "the Reservations API")
public interface ReservationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /reservations : Retrieve all reservations
     *
     * @return A list of reservations (status code 200)
     */
    @Operation(
        operationId = "reservationsGet",
        summary = "Retrieve all reservations",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of reservations", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Reservation.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reservations",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Reservation>> _reservationsGet(
        
    ) {
        return reservationsGet();
    }

    // Override this method
    default  ResponseEntity<List<Reservation>> reservationsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /reservations : Make a new reservation
     *
     * @param newReservation Reservation to make (required)
     * @return Reservation created successfully (status code 201)
     */
    @Operation(
        operationId = "reservationsPost",
        summary = "Make a new reservation",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Reservation created successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reservations",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _reservationsPost(
        @Parameter(name = "NewReservation", description = "Reservation to make", required = true) @Valid @RequestBody NewReservation newReservation
    ) {
        return reservationsPost(newReservation);
    }

    // Override this method
    default  ResponseEntity<Void> reservationsPost(NewReservation newReservation) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /reservations/{reservationId} : Modify an existing reservation
     *
     * @param reservationId  (required)
     * @param reservationUpdate Updates for the reservation (required)
     * @return Reservation updated successfully (status code 200)
     */
    @Operation(
        operationId = "reservationsReservationIdPatch",
        summary = "Modify an existing reservation",
        tags = { "Reservations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Reservation updated successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/reservations/{reservationId}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _reservationsReservationIdPatch(
        @Parameter(name = "reservationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("reservationId") Integer reservationId,
        @Parameter(name = "ReservationUpdate", description = "Updates for the reservation", required = true) @Valid @RequestBody ReservationUpdate reservationUpdate
    ) {
        return reservationsReservationIdPatch(reservationId, reservationUpdate);
    }

    // Override this method
    default  ResponseEntity<Void> reservationsReservationIdPatch(Integer reservationId, ReservationUpdate reservationUpdate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
