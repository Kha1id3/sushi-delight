/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.NewOrder;
import io.swagger.model.Order;
import io.swagger.model.OrderStatusUpdate;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-02T20:20:40.595331700+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Orders", description = "the Orders API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /orders : Retrieve all orders
     *
     * @return A list of orders (status code 200)
     */
    @Operation(
        operationId = "ordersGet",
        summary = "Retrieve all orders",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of orders", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/orders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Order>> _ordersGet(
        
    ) {
        return ordersGet();
    }

    // Override this method
    default  ResponseEntity<List<Order>> ordersGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ null, null ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /orders/{orderId}/status : Update the status of an order
     *
     * @param orderId  (required)
     * @param orderStatusUpdate New status for the order (required)
     * @return Order status updated successfully (status code 200)
     */
    @Operation(
        operationId = "ordersOrderIdStatusPatch",
        summary = "Update the status of an order",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order status updated successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/orders/{orderId}/status",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _ordersOrderIdStatusPatch(
        @Parameter(name = "orderId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Integer orderId,
        @Parameter(name = "OrderStatusUpdate", description = "New status for the order", required = true) @Valid @RequestBody OrderStatusUpdate orderStatusUpdate
    ) {
        return ordersOrderIdStatusPatch(orderId, orderStatusUpdate);
    }

    // Override this method
    default  ResponseEntity<Void> ordersOrderIdStatusPatch(Integer orderId, OrderStatusUpdate orderStatusUpdate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /orders : Place a new order
     *
     * @param newOrder Order to place (required)
     * @return Order placed successfully (status code 201)
     */
    @Operation(
        operationId = "ordersPost",
        summary = "Place a new order",
        tags = { "Orders" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Order placed successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/orders",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _ordersPost(
        @Parameter(name = "NewOrder", description = "Order to place", required = true) @Valid @RequestBody NewOrder newOrder
    ) {
        return ordersPost(newOrder);
    }

    // Override this method
    default  ResponseEntity<Void> ordersPost(NewOrder newOrder) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
