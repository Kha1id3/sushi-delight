openapi: 3.0.0
info:
  title: Sushi-Delight Web System API
  description: This API provides access to core features of the Sushi-Delight system, including menu browsing, order management, and table reservations.
  version: 1.0.0
  contact:
    name: Sushi-Delight Support Team
    email: 269553@student.pwr.edu.pl

servers:
  - url: http://localhost:8080
    description: Local server

paths:

  /customers:
    post:
      summary: Add a new customer
      tags:
        - Customers
      operationId: customersPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCustomer'
      responses:
        '201':
          description: Customer created successfully

    get:
      tags:
        - Customers
      summary: Get all customers
      operationId: customersGet
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewCustomer'

  /menu:
    get:
      summary: Retrieve menu items
      tags:
        - Menu
      responses:
        '200':
          description: A list of menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
    post:
      tags:
        - Menu
      summary: Add a menu item
      operationId: menuPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItem'
      responses:
        '201':
          description: Menu item added successfully
        '400':
          description: Invalid input

  /orders:
    get:
      summary: Retrieve all orders
      tags:
        - Orders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      summary: Place a new order
      tags:
        - Orders
      requestBody:
        description: Order to place
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order placed successfully

  /orders/{orderId}/status:
    patch:
      summary: Update the status of an order
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: New status for the order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
      responses:
        '200':
          description: Order status updated successfully

  /reservations:
    get:
      summary: Retrieve all reservations
      tags:
        - Reservations
      responses:
        '200':
          description: A list of reservations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'

    post:
      summary: Make a new reservation
      tags:
        - Reservations
      requestBody:
        description: Reservation to make
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReservation'
      responses:
        '201':
          description: Reservation created successfully

  /reservations/{reservationId}:
    patch:
      summary: Modify an existing reservation
      tags:
        - Reservations
      parameters:
        - name: reservationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updates for the reservation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationUpdate'
      responses:
        '200':
          description: Reservation updated successfully

components:
  schemas:

    NewCustomer:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string

    MenuItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string

    NewOrder:
      type: object
      properties:
        customerName:
          type: string
        items:
          type: array
          items:
            type: integer
        notes:
          type: string

    Order:
      allOf:
        - $ref: '#/components/schemas/NewOrder'
        - type: object
          properties:
            id:
              type: integer
            status:
              type: string

    OrderStatusUpdate:
      type: object
      properties:
        status:
          type: string

    NewReservation:
      type: object
      properties:
        customerName:
          type: string
        date:
          type: string
          format: date
        time:
          type: string
        guests:
          type: integer

    Reservation:
      allOf:
        - $ref: '#/components/schemas/NewReservation'
        - type: object
          properties:
            id:
              type: integer
            status:
              type: string

    ReservationUpdate:
      type: object
      properties:
        date:
          type: string
          format: date
        time:
          type: string
        guests:
          type: integer
        status:
          type: string
